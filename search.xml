<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github + Travis CI + PM2实现 Next.js 项目的（其他 Node.js 项目同理）持续集成和自动化部署</title>
    <url>/Deployment/Automated-deployment/Automated%20deployment/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将详细介绍如何实现一个 Next.js 项目的持续集成和自动化部署，鉴于自建 gitlab 和 gitlab-runner 有一定的服务器硬件要求，并且需要一定的时间成本，不是本文的重点，所以我们使用现成的 Github 作为本次教程代码管理工具，Travis CI 来自动化构建， 使用 PM2 作服务器的进程管理工具来完成本次教程。下面我列出本次教程所需的物理材料：</p>
<ul>
<li>Linux 远程服务器（笔者使用的版本：Ubuntu 18.04）</li>
<li>本地个人开发主机</li>
</ul>
<p>后文笔者将分别用 remote 和 local 简称上述材料</p>
<h1 id="部署策略简述"><a href="#部署策略简述" class="headerlink" title="部署策略简述"></a>部署策略简述</h1><p>我先把整个部署的策略按照步骤大致列一下，好让跟学的同学心里有个谱，判定一下符不符合自己的学习诉求</p>
<ol>
<li>使用 Github 托管源码</li>
<li>Travis CI 构建生产包，并将构建包提交到 Github 的部署分支（命名如：DEPLOY-PROD）上</li>
<li>Travis CI 完成构建包的推送后，调用 PM2 的 deploy 命令， 触发 remote 服务器拉取最新的构建包，然后自动重启服务</li>
</ol>
<a id="more"></a>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>remote 安装node版本管理工具 nvm [<a href="https://github.com/nvm-sh/nvm]" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm]</a> 不赘述，我信你有这个动手能力</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install 12.13.1 // 安装最新稳定版</span><br><span class="line">nvm use 12.13.1 // 切换node版本</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>全局安装 yarn (个人偏好)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yarn</span><br><span class="line">yarn -v</span><br></pre></td></tr></table></figure>

<p>全局安装 pm2 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add pm2</span><br><span class="line">pm2 -v</span><br></pre></td></tr></table></figure>

<h1 id="源码准备"><a href="#源码准备" class="headerlink" title="源码准备"></a>源码准备</h1><p>因为是教程，就一切从简了，这里以一个最小的 Next.js 应用为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-next-app</span><br></pre></td></tr></table></figure>

<p>安装完成后进入项目根目录试一下能不能在本地跑起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure>

<p>验证没问题以后，把代码推到你的 Github 上: </p>
<p>DO IT YOURSELF</p>
<h1 id="账号准备"><a href="#账号准备" class="headerlink" title="账号准备"></a>账号准备</h1><ol>
<li><p>打开 Travis CI 官网 [<a href="https://travis-ci.com/]" target="_blank" rel="noopener">https://travis-ci.com/]</a></p>
</li>
<li><p>使用 Github 账号登录 Travis CI，授权</p>
</li>
<li><p>打开 Travis CI 个人页 <a href="https://travis-ci.com/account/repositories]" target="_blank" rel="noopener">https://travis-ci.com/account/repositories]</a></p>
</li>
<li><p>点击Activate</p>
</li>
<li><p>选择点击Approve &amp; Install （可选择所有项目也可以只选择选中的项目，这个以后能在Github - Settings - Applications 里改的， 不重要）</p>
</li>
<li><p>这时 Travis CI 就可以读取到你选中的需要构建的 Github 项目了</p>
</li>
<li><p>配置 Github token</p>
<p>由于 Travis CI 完成构建以后要把构建包推到 Github 仓库上，所以需要生成一个 Token 以环境变量的方式给 Travis CI ，以获取 push 权限</p>
<p>Github -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token -&gt; 填写 Note 备注这个 token 的用途 -&gt; Select scopes 勾选 repo 一项 -&gt; Generate token 确认生成 -&gt; 复制生成的 token (注意这个 token 只会展示一次， 以后不会再次展现) -&gt; 回到 Travis CI 个人页, 找到你想要部署的项目，点击 Settings -&gt; 在 Environment Variables 新增一个名为 <code>GH_TOKEN</code> 的环境变量，value 就是刚才复制的 token 然后选择分支 master （根据实际情况选择）， 安全起见，<strong>不要勾选后面的 DISPLAY VALUE IN BUILD LOG</strong> </p>
</li>
</ol>
<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>一切就绪后，现在我们先来解决构建的问题，在项目的根目录下编写构建脚本 <em>.travis.yml</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .travis.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#.travis.yml</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">12</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">yarn</span></span><br><span class="line"><span class="comment">#指定构建分支</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"><span class="comment">#构建成功后，把部署所需的文件都拷贝到 dist 文件夹下</span></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">mkdir</span> <span class="string">dist</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cp</span> <span class="bullet">-r</span> <span class="string">.next/</span> <span class="string">dist/.next</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cp</span> <span class="string">package.json</span> <span class="string">dist</span></span><br><span class="line"><span class="comment">#把 dist 文件推送到 github DEPLOY-PROD 分支下</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">  skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  github_token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line"><span class="attr">  keep_history:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  target_branch:</span> <span class="string">DEPLOY-PROD</span></span><br><span class="line"><span class="attr">  committer_from_gh:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  local_dir:</span> <span class="string">dist</span></span><br></pre></td></tr></table></figure>

<p><a href="这里默认你的私钥在默认路径上哈，如果有异，自行调整路径即可">^注</a>: 搭建过 Github Page 的朋友对<code>provider: pages</code>应该不陌生，这里顺便说明一下，笔者的这个部署策略其实就是借鉴了 Github Page 部署的思路，对这块还不熟悉的朋友，建议也可以自己动手利用 Github Page 搭一个个人博客试试</p>
<p>完成构建脚本的编写后，我们提交一下代码触发一下构建试试</p>
<p>等待 Travis CI 构建完成后，查看一下仓库下是否多了一个 DEPLOY-PROD 分支，并且分支下文件无误就说明构建这一步已经完成了。本文的重点在<strong>自动化部署</strong>，所以下文才是真正的核心部分</p>
<h1 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h1><p>现在，我们整理一下思路，我们现状是：</p>
<ul>
<li>完成了源码托管</li>
<li>完成了自动化构建</li>
<li>完成了部署分支 DEPLOY-PROD</li>
</ul>
<p>我们需要完成的任务是：</p>
<ul>
<li>remote 拉取 DEPLOY-PROD 分支下的文件</li>
<li>执行启动脚本 <code>yarn start</code> 启动服务</li>
</ul>
<p>笔者以往管理 Node 服务进程常用的一个工具为 </p>
<p>近期在鼓捣自己的服务器经常查阅 PM2 文档时无意间发现了 <code>pm2 deploy</code> 的API，如获至宝 </p>
<p>废话不多说， 列举下利用 <code>pm2 deploy</code>的构建机器需要哪些前提条件:</p>
<ol>
<li>装有 pm2 （还说不废话）</li>
<li>有权登录你的服务器</li>
</ol>
<p>1好办，2有点头疼</p>
<p>从安全的角度上来说，我们云服务器一般是不允许 root 通过密码登录的，都是密钥对登录，那么我们就需要把我们个人主机（默认 local 已经是通过密钥对连接 remote 了）的私钥传给 Travis CI，怎么传呢，通过上传到 Github 来传？</p>
<h2 id="Travis-CI-构建机器连接-remote-策略"><a href="#Travis-CI-构建机器连接-remote-策略" class="headerlink" title="Travis CI 构建机器连接 remote 策略"></a>Travis CI 构建机器连接 remote 策略</h2><p><strong>是的，通过 Github，但当然不是把私钥裸露上传，而是通过 Travis CI 提供的一个命令行工具 travis 对私钥进行加密，travis加密会生成一个加密过的文件并且会自动在项目构建配置里生成两个用于解密的环境变量，我们把加密过的文件上传到 Github 项目仓库下，构建时用两个解密的环境变量把文件解密，这样一来，Travis CI 构建机器就有权限连接 remote了，而且安全问题得以保障</strong>，下面是具体操作步骤：</p>
<ol>
<li><p>Local 安装 travis </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure>
</li>
<li><p>用 github 账号登录 travis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">travis login --com</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入项目的根目录加密私钥</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">travis encrypt-file ~/.ssh/id_rsa --add --com</span><br></pre></td></tr></table></figure>

</li>
</ol>
<pre><code>travis会自动识别本地仓库对应的是远程的哪个仓库，执行完命令后，你的本地项目根目录会生成一个 `id_rsa.enc` 文件，你的 `.travis.yml` 脚本会多出一段 `before-install` 的解密脚本（需要调整一下细节，详情见下文完整文件），打开 Travis CI 的项目设置页查看 Environment Variables 一栏多了一个 以 `_iv` 和一个以 `_key` 结尾的环境变量</code></pre><ol start="4">
<li><p>第3步的结果确认无误后，我们再给 Travis CI 配置多一个环境变量PROD_SERVER_IP来存放 remote IP，添加方法上文讲过，不再赘述。</p>
</li>
<li><p>我们修改构建脚本文件来验证一下是否能够登陆成功</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">12</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">yarn</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_db8d9b5ea11f_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_db8d9b5ea11f_iv</span> <span class="bullet">-in</span> <span class="string">id_rsa.enc</span> <span class="bullet">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="bullet">-d</span></span><br><span class="line">  <span class="comment">#降低id_rsa文件的权限，否则ssh处于安全方面的原因会拒绝读取秘钥</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">  <span class="comment">#将生产服务器地址加入到构建机的信任列表中，否则连接时会询问是否信任服务器</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="bullet">-e</span> <span class="string">"Host $PROD_SERVER_IP\n\tStrictHostKeyChecking no\n"</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/config</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">dist</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cp</span> <span class="bullet">-r</span> <span class="string">.next/</span> <span class="string">dist/.next</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cp</span> <span class="string">package.json</span> <span class="string">dist</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">  skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  github_token:</span> <span class="string">"$GH_TOKEN"</span></span><br><span class="line"><span class="attr">  keep_history:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  target_branch:</span> <span class="string">DEPLOY-PROD</span></span><br><span class="line"><span class="attr">  committer_from_gh:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  local_dir:</span> <span class="string">dist</span></span><br><span class="line"><span class="attr">after_deploy:</span></span><br><span class="line">  <span class="string">ssh</span> <span class="string">root@$PROD_SERVER_IP</span> <span class="string">'pwd'</span></span><br></pre></td></tr></table></figure>

<p>提交代码，注意要把 id_rsa.enc 文件带上，千万别错把你的真正的私钥提交了。</p>
<p>等待构建完成，确认构建日志是否打印出 <code>/root</code>  字样验证连接成功与否</p>
</li>
</ol>
<h2 id="远程服务器获取github仓库pull权限"><a href="#远程服务器获取github仓库pull权限" class="headerlink" title="远程服务器获取github仓库pull权限"></a>远程服务器获取github仓库pull权限</h2><p>使用 pm2 部署还有个前提，直接引用官方原话</p>
<blockquote>
<p>Verify that your remote server has the permission to git clone the repository</p>
</blockquote>
<p>需要确保 remote 能够使用 ssh 的方式 clone 代码仓库</p>
<p>操作步骤： </p>
<ol>
<li><p>remote 生成密钥对（ubuntu为例，已有密钥对的话忽略此步）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa // 一路回车，不要设置使用短语</span><br><span class="line">cat .ssh/id_rsa.pub // 把打印出来的公钥内容复制</span><br></pre></td></tr></table></figure>
</li>
<li><p>Github -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key -&gt; Title 一栏填入备注信息，Key 一栏粘贴第1步复制的公钥 -&gt; Add SSH key</p>
</li>
<li><p>测试 remote 拉取仓库，注意使用 SSH 连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> <span class="variable">$YOUR_SSH_GIT_URL</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拉取权限没问题后，我们创建一个空目录以备后文部署使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /data/www/demo-for-automated-deployment</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="配置-pm2"><a href="#配置-pm2" class="headerlink" title="配置 pm2"></a>配置 pm2</h2><p>解决了仓库拉取的问题后，我们正式进入部署配置的阶段</p>
<p>参考 pm2 deployment 的相关文档，根据我们实际的需求来编写 pm2 的配置文件，项目根目录下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">vim ecosystem.config.js</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ecosystem.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'da_prod'</span>,</span><br><span class="line">      script: <span class="string">'yarn'</span>,</span><br><span class="line">      args: <span class="string">'run start'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  deploy: &#123;</span><br><span class="line">    <span class="comment">// "prod" is the environment name</span></span><br><span class="line">    prod: &#123;</span><br><span class="line">      user: <span class="string">'root'</span>,</span><br><span class="line">      key: <span class="string">'~/.ssh/id_rsa'</span>,</span><br><span class="line">      host: [<span class="string">'$YOUR_REMOTE_IP'</span>],</span><br><span class="line">      ssh_options: <span class="string">'StrictHostKeyChecking=no'</span>,</span><br><span class="line">      <span class="comment">// 拉取部署分支</span></span><br><span class="line">      ref: <span class="string">'origin/DEPLOY-PROD'</span>,</span><br><span class="line">      <span class="comment">// 仓库地址</span></span><br><span class="line">      repo: <span class="string">'git@github.com:Echo-Lynn/demo-for-automated-deployment.git'</span>,</span><br><span class="line">      <span class="comment">// 部署 remote 路径</span></span><br><span class="line">      path: <span class="string">'/data/www/demo-for-automated-deployment'</span>,</span><br><span class="line">      <span class="string">'post-deploy'</span>: <span class="string">'.  /root/.nvm/nvm.sh &amp;&amp; yarn install &amp;&amp; pm2 reload ecosystem.config.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>apps</code> 选项是启动服务使用的配置，也就是说执行环境在 remote；<code>deploy</code> 是部署命令，执行环境在 Travis CI 的构建机器</p>
<p><a href="这里默认你的私钥在默认路径上哈，如果有异，自行调整路径即可">^注</a>: 有个坑点坑了笔者很多时间，我们平时使用终端连上服务器后，系统会开始自动准备好环境变量了，所以我们能轻松自如地在终端里使用 <code>npm</code>、<code>yarn</code>、<code>node</code>等非 Ubuntu 自带的命令。pm2 部署的时候远程调用 <code>yarn</code> 和 <code>pm2</code> ，是在非交互式的情况下调用的，也就是说环境变量并没有立刻就绪，所以在 <code>post-deploy</code> 里需要手动调用一下 <code>/root/.nvm/nvm.sh</code> 这个环境变量的脚本</p>
<p>修改 <code>.travis.yml</code> 文件的 <code>install</code> 和 <code>after_deploy</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">install:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">global</span> <span class="string">pm2</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">mkdir</span> <span class="string">dist</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cp</span> <span class="bullet">-r</span> <span class="string">.next/</span> <span class="string">dist/.next</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cp</span> <span class="string">package.json</span> <span class="string">ecosystem.config.js</span> <span class="string">dist</span></span><br><span class="line"><span class="attr">after_deploy:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">pm2</span> <span class="string">deploy</span> <span class="string">pm2.config.js</span> <span class="string">prod</span> <span class="string">setup</span> <span class="bullet">--force</span></span><br></pre></td></tr></table></figure>

<p>第一次使用 <code>setup</code> 建立部署环境</p>
<p>提交代码到 Github，等待构建完成后，查看构建日志看到 pm2 deploy后有 <code>suucess</code> 字样就说明 setup 成功了</p>
<p>接着，修改 <code>.travis.yml</code> 文件的 <code>after_deploy</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">after_deploy:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">pm2</span> <span class="string">deploy</span> <span class="string">pm2.config.js</span> <span class="string">prod</span> <span class="string">update</span> <span class="bullet">--force</span></span><br></pre></td></tr></table></figure>

<p>提交代码到 Github，等待构建完成</p>
<p>最后，在远程服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 ls</span><br><span class="line">curl http://localhost:3000</span><br></pre></td></tr></table></figure>

<p>验证进程是否成功启动，服务是否能够访问得到</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本次分享的内容就到此结束了。由于构建和部署本身就是比较综合性的应用，涉及的知识范围比较广，对动手能力和调试排除能力都有较高的要求，实际操作起来可能由于各种环境的不尽相同也会产生一些不顺利的体验，但这些其实都不重要，重要的是供大家参考的这个部署思路，条条大路通罗马，具体怎么设计策略要看手上的资源和场景需求。</p>
<h1 id="DEMO地址"><a href="#DEMO地址" class="headerlink" title="DEMO地址"></a>DEMO地址</h1>]]></content>
      <categories>
        <category>Deployment</category>
        <category>Automated deployment</category>
      </categories>
  </entry>
  <entry>
    <title>在 Ubuntu 上使用 Shadowsocks 搭建个人 VPN 服务器</title>
    <url>/Tools/Shadowsocks/shadowsocks/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>拥有一台海外云服务器能做什么？</p>
<p>能搭建个人专属的 VPN 服务器</p>
<p>搭建 VPN 服务器能做什么？</p>
<p>能。。。。爱搭不搭</p>
<a id="more"></a>

<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ul>
<li>一台装有Ubuntu系统且拥有海外公网 IP 的云服务器</li>
</ul>
<h1 id="安装-Shadowsocks-服务端"><a href="#安装-Shadowsocks-服务端" class="headerlink" title="安装 Shadowsocks 服务端"></a>安装 Shadowsocks 服务端</h1><p>首先通过 SSH 连接你的云服务器，如何连接服务器不是本文的重点，这里不予以赘述</p>
<p>如果服务器的系统是新装的，建议先更新一下源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp; apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>更新完成后，安装 pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python-pip</span><br></pre></td></tr></table></figure>

<p>利用 pip 安装 Shadowsocks 服务端程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>

<h1 id="配置-Shadowsocks-服务器"><a href="#配置-Shadowsocks-服务器" class="headerlink" title="配置 Shadowsocks 服务器"></a>配置 Shadowsocks 服务器</h1><p>按照上文安装 Shadowsocks 完成后，我们直接可以通过命令的方式启动 Shadowsocks 服务，但笔者推荐利用读取配置文件的方式来启动，所以就不介绍命令行启动的方式了</p>
<p>在登录用户的目录下创建配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir shadowsocks</span><br><span class="line">vim shadowsocks/config.json</span><br></pre></td></tr></table></figure>

<p>键入以下内容（别忘记把带有$的变量替换成你自己的信息）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: <span class="string">"8388"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="string">"1080"</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>: &#123;</span><br><span class="line">        <span class="attr">"8387"</span>: <span class="string">"$your_password"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>server</code>直接 <code>0.0.0.0</code> 指向当前机器</p>
<p><code>server_port</code> 服务端端口</p>
<p><code>local_address</code> 是本地代理的地址</p>
<p><code>local_port</code> 本地代理的端口</p>
<p><code>port_password</code> 是创建客户端端口号；key （如 “8387”） 是端口号，value 是该端口号对应的连接密码，这里可以创建多个账号，供多个用户连接</p>
<p><code>timeout</code> 超时时间</p>
<p><code>method</code> 加密方式</p>
<p><code>fast_open</code> 是否使用 TCP 连接</p>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><p>完成配置文件的编写后，我们就来启动它</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssserver ‐c ~/shadowsocks/config.json ‐d start</span><br></pre></td></tr></table></figure>

<h1 id="验证服务是否成功开启"><a href="#验证服务是否成功开启" class="headerlink" title="验证服务是否成功开启"></a>验证服务是否成功开启</h1><p>我们首先通过查看 shadowsocks 的日志文件来验证服务是否启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/shadowsocks.log</span><br></pre></td></tr></table></figure>

<p>如果一切顺利的话，你将只看到这样一句日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO     starting server at xxx.xx.xxx.xxx:8387</span><br></pre></td></tr></table></figure>

<p>这说明你的服务启动成功了</p>
<p>如果看到以下包含以下字样的报错日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">undefined symbol: EVP_CIPHER_CTX_cleanup</span><br></pre></td></tr></table></figure>

<p>这个问题是由于在 openssl 1.1.0 版本中，废弃了 EVP_CIPHER_CTX_cleanup 函数，如官网中所说：</p>
<blockquote>
<p>EVP_CIPHER_CTX was made opaque in OpenSSL 1.1.0. As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared.  </p>
</blockquote>
<blockquote>
<p>EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset(). </p>
</blockquote>
<p>解决问题的办法就是：</p>
<ol>
<li>用 vim 打开文件：vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py (该路径请根据自己的系统情况自行修改，如果不知道该文件在哪里的话，可以使用find命令查找文件位置)</li>
<li>搜索cleanup，共有两处</li>
<li>将第一处（2.8.2版本在52行）libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,) 改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)</li>
<li>将第二处（2.8.2版本在111行）libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)<br>改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)</li>
<li>保存并退出</li>
<li>重新执行启动命令，然后查看日志文件验证是否启动成功</li>
</ol>
<h1 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h1><p>完成 Shadowsocks 的服务端部署后，尝试一下客户端连接</p>
<h2 id="下载客户端程序-Outline"><a href="#下载客户端程序-Outline" class="headerlink" title="下载客户端程序 Outline"></a>下载客户端程序 Outline</h2><p>下载地址：[<a href="https://getoutline.org/zh-CN/home]" target="_blank" rel="noopener">https://getoutline.org/zh-CN/home]</a></p>
<p>Outline 同时支持 Android、IOS、macOS、Windows、Chrome OS、Linux 六大终端平台，本文以 IOS 为例，App Store 可以直接搜索到 Outline 下载</p>
<p>然后我们转到 Shadowsocks 官网教程：[<a href="https://shadowsocks.org/en/config/quick-guide.html]" target="_blank" rel="noopener">https://shadowsocks.org/en/config/quick-guide.html]</a></p>
<p>根据我们刚才的配置生成一个可以供 Outline 识别的链接</p>
<ol>
<li><p>找到 Try it yourself 一栏，在 Plain 一行输入 ss://aes-256-cfb:$your_password@xxx.xx.xxx.xxx:8387</p>
<p><code>ss://</code> 表示使用 Shadowsocks 协议</p>
<p><code>aes-256-cfb</code> 表示加密方式</p>
<p><code>$your_password</code> 8387 端口对应的密码</p>
<p><code>xxx.xx.xxx.xxx</code> 你服务器的公网 IP</p>
<p><code>8387</code> 服务端配置的端口</p>
</li>
<li><p>拷贝 Encoded 下自动生成的链接到你的手机</p>
</li>
</ol>
<p>打开 Outline - 添加服务器 - 输入刚才拷贝的链接 - 添加完成后点击连接</p>
<p>Outline Logo 变成绿色后表示连接成功，这个时候可以查看自己手机的 IP 是否变成你服务器的公网 IP 来做最后一次验证本次 VPN 是否搭建成功，查看方式有很多种，这里不再赘述</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>在墙外放飞自我吧！！！</p>
<p>本文分享到此结束，如果过程遇到什么问题，欢迎在下面评论区给笔者留言，并留下您的邮箱，方便笔者联系</p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Shadowsocks</category>
      </categories>
  </entry>
  <entry>
    <title>Next.js部署web同构直出应用全指南（Mobx + Typescript）</title>
    <url>/Programming/JavaScript/Next.js%20with%20TypeScript%20and%20Mobx/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有关Next.js、同构直出、SEO、SPA等相关介绍将不再赘述，本文主要针对Next.js配合typescript和mobx搭建一个完整的生产部署的前端工程进行核心代码的分析以及主要坑点的讲解，非Next.js入门课程，下面我将会列出本教程所需要的前置预备知识和能力：</p>
<ul>
<li>nodejs服务端编程基础</li>
<li>已至少阅读一遍Next.js官方文档</li>
<li>熟练使用reactjs</li>
<li>熟练使用webpack</li>
<li>理解同构直出的概念和它解决了什么样的痛点</li>
<li>有一定的前端工程化、自动化部署的经验</li>
</ul>
<p>正文开始时，也就默认了有缘阅读到此文的同学均具备上述能力</p>
<p>原文地址：<a href="https://echo-lynn.github.io/Programming/JavaScript/Next.js%20with%20TypeScript%20and%20Mobx/" target="_blank" rel="noopener"><strong>Echo Lynn’s Blog</strong></a></p>
<p>作者将在原文上持续分享关于Next.js的高级拓展经验，有兴趣的朋友也可以在博客上留言你遇到的问题或者与作者交流</p>
<a id="more"></a>

<h1 id="创建基于typescript的项目"><a href="#创建基于typescript的项目" class="headerlink" title="创建基于typescript的项目"></a>创建基于typescript的项目</h1><p>Zeit在2019/07发布了Next.js 9 该版本最吸人眼球的两个Feature分别是 <strong>Built-in Zero-Config TypeScript Support</strong> 和 <strong>File system-Based Dynamic Routing</strong> 即<strong>零配置内置TypeScript支持</strong>和<strong>基于文件系统的动态路由支持</strong>，这里主要提及一下关于TypeScript的支持。在9.0之前的版本，Next.js从6.0开始通过一个名为 <em>@zeit/next-typescript</em> 提供了基础版本的TypeScript支持，但并没有整合类型检查，Next.js核心代码本身也不提供types类型所以这个版本提供的TypeScript支持并不友好。Zeit本次发布的Next.js 9 核心代码使用TypeScript重构，因此给开发体验带来了极致的提升。以下将使用官方提供的Demo <em>with-typescript</em> 作为种子项目，后面内容将在这个项目上进行集成</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-next-app --example with-typescript with-typescript-app</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn create next-app --example with-typescript with-typescript-app</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> with-typescript-app</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure>

<p>得到以下目录结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">with-typescript-app</span><br><span class="line">├─ .gitignore</span><br><span class="line">├─ README.md</span><br><span class="line">├─ components</span><br><span class="line">│  ├─ Layout.tsx</span><br><span class="line">│  ├─ List.tsx</span><br><span class="line">│  ├─ ListDetail.tsx</span><br><span class="line">│  └─ ListItem.tsx</span><br><span class="line">├─ interfaces</span><br><span class="line">│  └─ index.ts</span><br><span class="line">├─ next-env.d.ts</span><br><span class="line">├─ package.json</span><br><span class="line">├─ pages</span><br><span class="line">│  ├─ about.tsx</span><br><span class="line">│  ├─ detail.tsx</span><br><span class="line">│  ├─ index.tsx</span><br><span class="line">│  └─ initial-props.tsx</span><br><span class="line">├─ tsconfig.json</span><br><span class="line">├─ utils</span><br><span class="line">│  └─ sample-api.ts</span><br><span class="line">└─ yarn.lock</span><br></pre></td></tr></table></figure>

<h1 id="使用mobx作为app状态管理方案"><a href="#使用mobx作为app状态管理方案" class="headerlink" title="使用mobx作为app状态管理方案"></a>使用mobx作为app状态管理方案</h1><p>有关Mobx的介绍请自行官网查阅：[<a href="https://mobx.js.org/]" target="_blank" rel="noopener">https://mobx.js.org/]</a></p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>安装mobx、mobx-react模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add mobx mobx-react</span><br><span class="line">// or</span><br><span class="line">npm install --save mobx mobx-react</span><br></pre></td></tr></table></figure>

<p>安装babel plugin对装饰器提供编译支持：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add -D @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators</span><br><span class="line">// or</span><br><span class="line">npm install --save-dev @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>创建一个.babelrc的文件在工程的根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch .babelrc</span><br><span class="line">vi .babelrc</span><br></pre></td></tr></table></figure>

<p>写入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"next/babel"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="attr">"legacy"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-class-properties"</span>, &#123; <span class="attr">"loose"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并在tsconfig.json中加入一行配置来使ts支持装饰器语法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="store子模块代码实现"><a href="#store子模块代码实现" class="headerlink" title="store子模块代码实现"></a>store子模块代码实现</h2><p>创建stores文件夹并创建user.ts：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir stores</span><br><span class="line">touch stores/user.ts</span><br></pre></td></tr></table></figure>

<p>写入:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;action, observable&#125; <span class="keyword">from</span> <span class="string">'mobx'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> UserStore &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@observable</span> name: <span class="built_in">string</span> = <span class="string">'Clint'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (<span class="params">initialState: <span class="built_in">any</span> = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = initialState.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@action</span> setName(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserStore类中的构造函数的意义是：<strong>接受初始化数据来对该store下的状态进行初始化或者将在服务端渲染首屏时已经产生的状态同步到客户端（这里是同构直出中状态同步一个非常关键的环节，只有理解得足够透彻，Next.js才能用得得心应手</strong><br>由于每次创建一个这样的store子模块都需要实现一样的构造函数来对模块中的状态初始化或同步，我们可以通过编写一个基类，让所有store子模块继承这个基类来优化一下代码：<br>创建stores/base.ts，写入：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Base &#123;</span><br><span class="line">  [key: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">initState: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> initState) &#123;</span><br><span class="line">      <span class="keyword">if</span> (initState.hasOwnProperty(k)) &#123;</span><br><span class="line">        <span class="keyword">this</span>[k] = initState[k]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改user.ts:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;action, observable&#125; <span class="keyword">from</span> <span class="string">'mobx'</span></span><br><span class="line"><span class="keyword">import</span> Base <span class="keyword">from</span> <span class="string">'./base'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> UserStore <span class="keyword">extends</span> Base &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@observable</span> name: <span class="built_in">string</span> = <span class="string">'Clint'</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@action</span> setName(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建stores/config.ts，当有新的store子模块需要创建时候，只要通过这个配置文件引入子模块即可自动集成到根store中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch stores/config.ts</span><br></pre></td></tr></table></figure>

<p>写入：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> userStore <span class="keyword">from</span> <span class="string">'./user'</span></span><br><span class="line"><span class="keyword">import</span> Base <span class="keyword">from</span> <span class="string">'./base'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config: &#123; [key: <span class="built_in">string</span>]: <span class="keyword">typeof</span> Base &#125; = &#123;</span><br><span class="line">  userStore</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config</span><br></pre></td></tr></table></figure>

<h2 id="mobx主体逻辑"><a href="#mobx主体逻辑" class="headerlink" title="mobx主体逻辑"></a>mobx主体逻辑</h2><p>优化了store子模块的代码以后，接下来实现store的主体逻辑，创建stores/index.ts：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch stores/index.ts</span><br></pre></td></tr></table></figure>

<p>写入:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useStaticRendering&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isServer = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'undefined'</span></span><br><span class="line"><span class="comment">// Comment 1</span></span><br><span class="line">useStaticRendering(isServer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Store &#123;</span><br><span class="line">  [key: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">  <span class="comment">// Comment 2</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">initialState: <span class="built_in">any</span> = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> config) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config.hasOwnProperty(k)) &#123;</span><br><span class="line">        <span class="keyword">this</span>[k] = <span class="keyword">new</span> config[k](initialState[k])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store: <span class="built_in">any</span> = <span class="literal">null</span></span><br><span class="line"><span class="comment">// Comment 3</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initializeStore</span>(<span class="params">initialState = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isServer) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Store(initialState)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (store === <span class="literal">null</span>) &#123;</span><br><span class="line">    store = <span class="keyword">new</span> Store(initialState)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码注释：</p>
<ol>
<li>由于Next.js首屏渲染是在服务端执行的，Mobx所创建的状态是可观察的对象，使用Mobx创建的可观察对象会在内存中使用listener来监听对象的变化，但实际上在服务端是没有必要监听变化的，因为首屏渲染完成得到html文件后，后续的工作都由客户端接手，所以如果在服务端的对象是可观察的，将有可能造成内存泄漏，所以我们使用useStaticRendering方法，当该文件在服务端执行时，让Mobx创建静态的普通js对象即可</li>
<li>构造函数将在Mobx的根store下挂载上文创建的子模块，并将接收到的初始状态/服务端透传的状态一一赋值给子模块，<strong>当赋值过程是服务端状态同步时，由于执行环境是客户端，子模块中的状态将重新获得可观察的属性，能够让使用了该状态值的react组件响应变化</strong></li>
<li><em>initializeStore</em> 方法，服务端渲染时，每个独立的请求都将创建一个新的store，以此来隔离请求之间的状态混淆，当客户端渲染时，只需要引用之前已经创建过的store即可，因为同一个应用程序（SPA）应该共享一颗状态树<br>以上即Mobx状态管理的主逻辑实现，接下来将讲述Mobx如何配合Next.js和react实现状态管理<h2 id="mobx-react"><a href="#mobx-react" class="headerlink" title="mobx-react"></a>mobx-react</h2></li>
</ol>
<p>Mobx配合react实现状态管理可以引用mobx-react来实现，写代码之前我们先来分析一下需求，即希望达Mobx具备什么样能力。</p>
<p>前文我们设计Mobx代码结构的时候，实现了一个store的子模块概念，那么第一个问题来了，<strong>能通过注入的方式，给页面按需加载我们所需要的store子模块吗？</strong></p>
<p>另外，我们都已经知道，Next.js是通过一个实现一个名为<em>getInitialProps<em>的静态方法来做到当页面被首屏请求的时候，在服务端执行</em>getInitialProps<em>从而获取页面渲染所需的数据来做服务端渲染的，那么第二个问题：*</em>如何在 *getInitialProps</em> 中获取store对象？**</p>
<p>第三，上文同样提到了，我们服务端首屏渲染的时候会产生一些初始状态存在store的某个或者某些子模块中，那么<strong>Next.js是通过什么手段将这些状态带给客户端的</strong> 而 <strong>我们又怎样才能让这些状态同步到客户端的store对象里来保持服务端客户端状态一致呢？</strong>这是第三和第四个问题。归纳一下需要解决的事务：</p>
<ol>
<li>向react组件注入store子模块</li>
<li>在<em>getInitialProps</em>方法中使用store对象填充数据</li>
<li>分析Next.js数据从服务端向客户端同步的机制</li>
<li>同步服务端和客户端的store状态</li>
</ol>
<p>解决第一个问题我们需要重写Next.js的<em>_app.tsx</em>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch pages/_app.tsx</span><br></pre></td></tr></table></figure>

<p>写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/_app.tsx</span><br><span class="line">import App, &#123;AppContext&#125; from &apos;next/app&apos;</span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line">import &#123;initializeStore, Store&#125; from &apos;../stores&apos;</span><br><span class="line">import &#123;Provider&#125; from &apos;mobx-react&apos;</span><br><span class="line"></span><br><span class="line">class MyMobxApp extends App &#123;</span><br><span class="line"></span><br><span class="line">  mobxStore: Store</span><br><span class="line"></span><br><span class="line">  // Fetching serialized(JSON) store state</span><br><span class="line">  static async getInitialProps(appContext: AppContext): Promise&lt;any&gt; &#123;</span><br><span class="line">    const ctx: any = appContext.ctx</span><br><span class="line">    // Comment 1</span><br><span class="line">    ctx.mobxStore = initializeStore()</span><br><span class="line">    const appProps = await App.getInitialProps(appContext)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...appProps,</span><br><span class="line">      initialMobxState: ctx.mobxStore</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  constructor(props: any) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    // Comment 2</span><br><span class="line">    const isServer = typeof window === &apos;undefined&apos;</span><br><span class="line">    this.mobxStore = isServer ? props.initialMobxState : initializeStore(props.initialMobxState)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;Component, pageProps&#125;: any = this.props</span><br><span class="line">    return (</span><br><span class="line">      // Comment 3</span><br><span class="line">      &lt;Provider &#123;...this.mobxStore&#125;&gt;</span><br><span class="line">        &lt;Component &#123;...pageProps&#125; /&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default MyMobxApp</span><br></pre></td></tr></table></figure>

<p>代码注释：</p>
<ol>
<li><p>创建（服务端）或获取（客户端）store对象命名为mobxStore，将mobxStore挂载到appContext.ctx对象上，这个对象会在页面的<em>getInitialProps</em>方法中作为入参传入，这就解决了上述的第二个问题</p>
</li>
<li><p>这里其实需要先解释一下Next.js同构直出的原理：<strong>当首屏被请求时，Next.js在服务端利用react渲染页面的机制（服务端渲染生命周期只会执行到render）渲染出html文件后，来满足SEO的需求和首屏页面的展示，然后返回给客户端（通常是浏览器），到了浏览器，Next.js则会跑一遍完整React的生命周期渲染，所以只要渲染结果一致，react内置的<em>diff</em>算法结果没有任何差异，你将不会看到页面有任何可察觉的变化</strong><br>Next.js通过什么方式来保证第二点提到的<strong>渲染结果一致</strong>呢？这就是我们要解决的第三个事务。Next.js服务端渲染html文件的同时，将本次请求产生的有关数据通过写入script标签的方式插在html文件一并返回。起一下本地服务，我们使用Chrome控制台看一下实际数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn dev</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script id=<span class="string">"__NEXT_DATA__"</span> type=<span class="string">"application/json"</span>&gt;</span><br><span class="line">  &#123;<span class="string">"dataManager"</span>:<span class="string">"[]"</span>,<span class="string">"props"</span>:&#123;<span class="string">"pageProps"</span>:&#123;&#125;,<span class="string">"initialMobxState"</span>:&#123;<span class="string">"userStore"</span>:&#123;&#125;&#125;&#125;,<span class="string">"page"</span>:<span class="string">"/"</span>,<span class="string">"query"</span>:&#123;&#125;,<span class="string">"buildId"</span>:<span class="string">"development"</span>&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>就是以这种方式，<strong>Next.js运行在客户端时会依据服务端带回的<em><strong>NEXT_DATA</strong></em>构建React SPA</strong>，这就是同构直出的核心原理。</p>
<p>从上面得到的数据，我们不难发现<em>initialMobxState</em>被带回，这时，回过头来看下<em>pages/_app.tsx</em>中的一段代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params">props: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">const</span> isServer = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'undefined'</span></span><br><span class="line">    <span class="keyword">this</span>.mobxStore = isServer ? props.initialMobxState : initializeStore(props.initialMobxState)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在构造函数的执行环境为客户端时，store对象会依据<em><strong>NEXT_DATA</strong></em>中的<em>props.initialMobxState</em>被创建，这就完成了服务端store的状态向客户端同步，这就解决了事务4</p>
</li>
</ol>
<ol start="3">
<li><p>将store使用拓展运算符将子模块通过props注入到<em>provider</em>组件，配合mobx-react提供的<em>inject</em>方法来达到按需获取store模块的功能，下面给出一种用法代码示例，更多使用方式请移步mobx-react[<a href="https://github.com/mobxjs/mobx-react]" target="_blank" rel="noopener">https://github.com/mobxjs/mobx-react]</a> 了解更多</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/detail.tsx</span><br><span class="line">import * as React from &apos;react&apos;</span><br><span class="line">import Layout from &apos;../components/Layout&apos;</span><br><span class="line">import &#123;User&#125; from &apos;../interfaces&apos;</span><br><span class="line">import &#123;findData&#125; from &apos;../utils/sample-api&apos;</span><br><span class="line">import ListDetail from &apos;../components/ListDetail&apos;</span><br><span class="line">import &#123;inject, observer&#125; from &apos;mobx-react&apos;</span><br><span class="line">import UserStore from &apos;../stores/user&apos;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  item?: User</span><br><span class="line">  userStore: UserStore</span><br><span class="line">  errors?: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@inject(&apos;userStore&apos;)</span><br><span class="line">@observer</span><br><span class="line">class InitialPropsDetail extends React.Component&lt;Props&gt; &#123;</span><br><span class="line">  static getInitialProps = async (&#123;query, mobxStore&#125;: any) =&gt; &#123;</span><br><span class="line">    mobxStore.userStore.setName(&apos;set by server&apos;)</span><br><span class="line">    try &#123;</span><br><span class="line">      const &#123;id&#125; = query</span><br><span class="line">      const item = await findData(Array.isArray(id) ? id[0] : id)</span><br><span class="line">      return &#123;item&#125;</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">      return &#123;errors: err.message&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;item, errors&#125; = this.props</span><br><span class="line"></span><br><span class="line">    if (errors) &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;Layout title=&#123;`Error | Next.js + TypeScript Example`&#125;&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            &lt;span style=&#123;&#123;color: &apos;red&apos;&#125;&#125;&gt;Error:&lt;/span&gt; &#123;errors&#125;</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">        &lt;/Layout&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;Layout</span><br><span class="line">        title=&#123;`$&#123;item ? item.name : &apos;Detail&apos;&#125; | Next.js + TypeScript Example`&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;item &amp;&amp; &lt;ListDetail item=&#123;item&#125;/&gt;&#125;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Name: &#123;this.props.userStore.name&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">          this.props.userStore.setName(&apos;set by client&apos;)</span><br><span class="line">        &#125;&#125;&gt;click to set name</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/Layout&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default InitialPropsDetail</span><br></pre></td></tr></table></figure>

<p>访问: [<a href="http://localhost:3000/detail?id=101]" target="_blank" rel="noopener">http://localhost:3000/detail?id=101]</a> 查看效果</p>
</li>
</ol>
<p>以上，就是基于Next.js开发的几个比较核心的思想和库的使用，下面开始介绍在构建和部署方面的内容</p>
<h1 id="构建编译"><a href="#构建编译" class="headerlink" title="构建编译"></a>构建编译</h1><p>Next.js使用webpack来构建打包项目，当项目不需要特殊的定制化构建的时候，执行以下命令即可构建项目包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">next build</span><br></pre></td></tr></table></figure>

<p>在前言里也提到，本文着重讲部署Next.js的完整实例，那么只以默认方式构建项目显然是满足不了我们的实际的生产诉求了，我会在这里讲一些平常我们构建项目所需要的几个比较通用的需求点，当然覆盖不了所有，不过也可以提供一些思路。</p>
<p>在这里，也顺便一提，当我们使用一个框架来搭建应用的时候，<strong>能使用框架本身提供的API实现功能请尽量使用</strong>，这样做的好处有哪些：</p>
<ol>
<li>避免重复造轮子</li>
<li>自然形成一套规范和标准，团队开发减少学习成本</li>
<li>文档现成，使用起来水到渠成</li>
<li>项目里越少带有主观偏好的代码越好</li>
</ol>
<h2 id="环境分割"><a href="#环境分割" class="headerlink" title="环境分割"></a>环境分割</h2><p>一个生产项目避免不了环境这个问题，比较常见的项目环境分为dev test production，即开发、测试、生产，下面我们以这类环境划分为例，多几种或者少几种同理可推</p>
<p>通常我们将项目内引用到的环境变量抽离出来，用配置文件把变量存起来，根据程序运行的环境来索引对应的配置文件，取出变量使用</p>
<p>在根目录下创建<em>/config</em>目录，分别创建<em>dev.js，test.js，prod.js</em>（提一下，这里为什么不是.ts文件呢，因为这个配置文件，构建时候被引用的文件，是不经过ts编译的）<em>index.js</em>项目根目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir config</span><br><span class="line">touch config/dev.js config/test.js config/prod.js config/index.js</span><br></pre></td></tr></table></figure>

<p>分别写入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/dev.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: <span class="string">'dev'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/test.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: <span class="string">'test'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/prod.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: <span class="string">'prod'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/index.js</span></span><br><span class="line"><span class="keyword">const</span> dev = <span class="built_in">require</span>(<span class="string">'./dev'</span>)</span><br><span class="line"><span class="keyword">const</span> test = <span class="built_in">require</span>(<span class="string">'./test'</span>)</span><br><span class="line"><span class="keyword">const</span> prod = <span class="built_in">require</span>(<span class="string">'./prod'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev,</span><br><span class="line">  test,</span><br><span class="line">  prod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Next.js构建(<code>next build</code>)和启动应用(<code>next</code>、<code>next start</code>)通过在根目录下<em>next.config.js</em>文件读取定制化的配置选项，当文件不存在时，使用默认配置构建</p>
<p>创建<em>next.config.js</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch next.config.js</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line"><span class="comment">// Get process DEPLOY_ENV value</span></span><br><span class="line"><span class="keyword">const</span> DEPLOY_ENV = process.env.DEPLOY_ENV || <span class="string">'dev'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  serverRuntimeConfig: &#123;</span><br><span class="line">    <span class="comment">// Will only be available on the server side</span></span><br><span class="line">    secret: <span class="string">'secret'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Use which config file according to DEPLOY_ENV</span></span><br><span class="line">  publicRuntimeConfig: config[DEPLOY_ENV]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<em>pages/index.tsx</em>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/index.tsx</span><br><span class="line">import * as React from &apos;react&apos;</span><br><span class="line">import Link from &apos;next/link&apos;</span><br><span class="line">import Layout from &apos;../components/Layout&apos;</span><br><span class="line">import &#123; NextPage &#125; from &apos;next&apos;</span><br><span class="line">import getConfig from &apos;next/config&apos;</span><br><span class="line"></span><br><span class="line">const &#123;publicRuntimeConfig, serverRuntimeConfig&#125; = getConfig()</span><br><span class="line"></span><br><span class="line">const IndexPage: NextPage = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Layout title=&quot;Home | Next.js + TypeScript Example&quot;&gt;</span><br><span class="line">      &lt;h1&gt;Hello Next.js 👋&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;Public config JSON string: &#123;JSON.stringify(publicRuntimeConfig)&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;Server side config JSON string: &#123;JSON.stringify(serverRuntimeConfig)&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;Link href=&quot;/about&quot;&gt;</span><br><span class="line">          &lt;a&gt;About&lt;/a&gt;</span><br><span class="line">        &lt;/Link&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/Layout&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default IndexPage</span><br></pre></td></tr></table></figure>

<p>Next.js配置文件中，有两个配置选项<em>serverRuntimeConfig</em>，<em>publicRuntimeConfig</em>，<em>serverRuntimeConfig</em>只允许程序运行在服务端时使用，<em>publicRuntimeConfig</em>选项同时允许服务端和客户端获取，我用<em>publicRuntimeConfig</em>讲解思路</p>
<p>完成以上代码编写后，执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">next</span><br></pre></td></tr></table></figure>

<p>使用浏览器打开 [<a href="http://localhost:3000]查看效果" target="_blank" rel="noopener">http://localhost:3000]查看效果</a></p>
<p>可以注意到浏览器显示了<em>publicRuntimeConfig</em>是<em>config/dev.js</em>的内容，而<em>serverRuntimeConfig</em>为空对象，细心的朋友会注意到，当你快速不断刷新页面的时候，是可以看到<em>serverRuntimeConfig</em>是由<code>{&quot;secret&quot;:  &quot;secret&quot;}</code>变为<code>{}</code>的，为什么会这样，结合上文提到的Next.js同构直出的核心思想和关于<em>serverRuntimeConfig</em>的特性就可以理解该现象了。</p>
<p>那么，现在我们要解决的问题就是，让程序构建后跑在test/prod环境时候，页面显示<em>config/test.js</em>或者<em>config/prod.js</em>的内容了</p>
<p>以test为例，Next.js的构建命令为<code>next build</code>，启动命令为<code>next start</code>，运行和构建都会根据<em>next.config.js</em>来决定应用构建和启动的定制化配置，从代码里可以看到，我们是根据一个叫<em>DEPLOY_ENV</em>的环境变量来索引配置文件的，那么我们只需要在运行<code>next build</code>和<code>next start</code>的时候给<em>DEPLOY_ENV</em>赋值即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEPLOY_ENV=<span class="built_in">test</span> next build</span><br><span class="line">DEPLOY_ENV=<span class="built_in">test</span> next start</span><br></pre></td></tr></table></figure>

<p>执行完上述命令，打开[<a href="http://localhost:3000]查看页面是否已显示*config/test.js*的内容，有关环境分割的内容就讲到这里，更多有关环境的拓展可以依据这样的思路来实现" target="_blank" rel="noopener">http://localhost:3000]查看页面是否已显示*config/test.js*的内容，有关环境分割的内容就讲到这里，更多有关环境的拓展可以依据这样的思路来实现</a></p>
<h2 id="CSS预编译"><a href="#CSS预编译" class="headerlink" title="CSS预编译"></a>CSS预编译</h2><p>这个就更加简单了，官方提供插件的，我就不费口舌讲一遍了，直接上链接</p>
<p>值得一提是的，Next.js在CSS方面有一点不足：<strong>所有的样式文件最终会被打包为一个<em>style.chunk.css</em>文件随着首屏加载一并返回</strong>。这会带来一点小小的缺陷就是当你的app工程庞大时，这个文件的体积会对首屏的加载带来一点影响，虽然在gzip压缩后这种影响微乎其微，不过终归是需要优化，另外一个问题就是，类名冲突了，你可能需要利用像Less、Sass这样的嵌套样式写法把不相关的页面样式包裹在一个命名空间里，或者是通过配置<code>{cssModules: true}</code>来为你的类名打上hash后缀。</p>
<p>关于CSS文件切割的问题笔者已经给Next.js作者提了issue了，期待后续版本的解决方案。</p>
<p>动手能力强webpack原理够硬的同学也可以尝试自己实现一下这个功能。笔者后面空下来有幸实现了的话，会再分享出来。</p>
<h1 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h1><p>Next.js不同于普通的静态web项目，当然，Next.js也可以搭建一个普通的静态项目，不过同构直出才是它的最大亮点，所以本文所有篇幅都是基于这个点出发的，不讨论其他小众方式运行Next.js</p>
<p>那么想部署同构直出，就需要有web服务器，前端领域目前比较热门的还是Node.js，Next.js的服务端也正是运行在Node.js上，下面介绍一下Next.js简单的部署方案，然后继续针对一些我认为出现频繁的一些场景讲解一下部署思路。</p>
<p>部署项目可以有两种方式：</p>
<p>一是把整个项目目录除了<em>node_modules</em>（当然你也可以把这个目录带上去，如果你连接服务端传输网速够快的话）以外的源文件一并上传到服务器，安装项目依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn</span><br><span class="line">// or</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>构建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEPLOY_ENV=<span class="variable">$YOUR_SERVER_ENV_TYPE</span> next build</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEPLOY_ENV=<span class="variable">$YOUR_SERVER_ENV_TYPE</span> next start</span><br></pre></td></tr></table></figure>

<p>二是你在本地或者使用 <a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">Docs Gitlab Com Runner</a> (推荐使用，具体操作自行查阅文档)</p>
<p>构建后把所需要的资源上传到服务器，列一下所需要的目录清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">app</span><br><span class="line">├─ .next // required</span><br><span class="line">├─ pages // just empty dir, <span class="keyword">for</span> safe</span><br><span class="line">├─ next.config.js // <span class="keyword">if</span> have</span><br><span class="line">├─ server.js // <span class="keyword">if</span> have</span><br><span class="line">├─ static // <span class="keyword">if</span> have</span><br><span class="line">├─ config // Mentioned above, <span class="keyword">if</span> have</span><br><span class="line">├─ package.json // required</span><br><span class="line">├─ package-lock.json // optional</span><br><span class="line">└─ yarn.lock // optional</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.next</code>：<code>next build</code>执行后编译完成的文件目录</li>
<li><code>pages</code>：建议传一个空目录。按理来说不需要，因为里面的源文件已经被打包到<em>.next</em>目录去了，但由于最近在部署的时候遇到一个报错提示说找不到pages，弄了一个空目录就正常运行了。emm…晚点去提个issue</li>
<li><code>next.config.js</code>：如果你有定制化配置的话</li>
<li><code>server.js</code>：如果你有定制化node服务的话</li>
<li><code>static</code>: 静态资源目录，由自己创建，Next.js编译会忽略这个目录，如果你app有引用这个目录的静态资源，需要带上</li>
<li><code>config</code>：前文提到的，如果你按照本文做的环境分割的话</li>
<li><code>package.json</code>：在服务器需要Next.js等的npm模块来启动服务，所以需要这个文件来安装依赖</li>
<li><code>package-lock.json</code>：不解释了</li>
<li><code>yarn.lock</code>：不解释了</li>
</ul>
<p>完成传输后，运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn</span><br><span class="line">// or</span><br><span class="line">npm install</span><br><span class="line">// no build <span class="built_in">command</span> needed</span><br><span class="line">DEPLOY_ENV=<span class="variable">$YOUR_SERVER_ENV_TYPE</span> next start</span><br></pre></td></tr></table></figure>

<h2 id="部署路径"><a href="#部署路径" class="headerlink" title="部署路径"></a>部署路径</h2><p>众所周知，Next.js默认是通过文件系统路由的（<em>file-system routing*）。假设你项目部署的域名是 <a href="http://www.myapp.com" target="_blank" rel="noopener">www.myapp.com</a> ，你要访问</em>/pages<em>目录下的</em>home.tsx*，则访问的url为 <a href="http://www.myapp.com/home" target="_blank" rel="noopener">http://www.myapp.com/home</a> ，通常这样是能够满足大部分的业务场景的，这一章我想要讲的，就是比较可能出现的另外一种业务场景，即单个域名下部署多个项目，不仅仅是Next.js项目，也有可能是Vue、React、Angular、JQuery等其他类型的web项目</p>
<p>……</p>
<p>原文链接持续更新：<a href="https://echo-lynn.github.io/Programming/JavaScript/Next.js%20with%20TypeScript%20and%20Mobx/" target="_blank" rel="noopener"><strong>Echo Lynn’s Blog</strong></a></p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>JavaScript</category>
      </categories>
  </entry>
</search>
